*Note:
  I've cloned repo from source on Win directory to Linux local dir. Then I tried to add remote, but in outptu it tells me
  that such remote (origin) already exists. "OK, then try to push commits" - I thought. (If someone knows why does is it,
  please tell me
  ###
  Here
  ###
  I've created repo in GitHub, but didn't add remote in Win source)
  And when I tried to push commits it showed me next:
  ---
    remote: error: refusing to update checked out branch: refs/heads/master
    remote: error: By default, updating the current branch in a non-bare repository
    remote: error: is denied, because it will make the index and work tree inconsistent
    remote: error: with what you pushed, and will require 'git reset --hard' to match
    remote: error: the work tree to HEAD.
    remote: error: 
    remote: error: You can set 'receive.denyCurrentBranch' configuration variable to
    remote: error: 'ignore' or 'warn' in the remote repository to allow pushing into
    remote: error: its current branch; however, this is not recommended unless you
    remote: error: arranged to update its work tree to match what you pushed in some
    remote: error: other way.
    remote: error: 
    remote: error: To squelch this message and still keep the default behaviour, set
    remote: error: 'receive.denyCurrentBranch' configuration variable to 'refuse'.
  ---
  It looks like that I didn't synchronized Linux repo with Windows.

 - When would you want to use a remote repository rather than keeping all your work local?
  In my poor experience I used (and use) remote repo when someone works on project with me. My machine doesn't work for   all the time but my teamates need a permanent access to the latest updates and vice versa.

 *Note:
	I think that when I added origin I associated a URL with some name to
	make it easier to connect with remote repo when pushing or pulling.

 - Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

   I think it can waste many time to check every time and connect to remote server

*Note:
	GitHub has a forking feature - I can make a copy into my profile from another profile repo. It works only in GitHub, so Git can't fork.
	When I clone forked repo, then I modify my forked repo only when pushing. So the original repo doesn't know about my changes.

*Note: fetch and pull
	fetch loads all unadded changes from remote repo, but it doesn't merge them with local working directory. Then there can be two (or more) heads.

	pull tries to merge local changes with downloaded, but when there is the conflict, user must resolve problem himself. But pull executes fast-forward merge.
	Fast-forward merge can be executed when local merged commit is a parent or ancestor of pulled merged commit. So git can run here automerge.

*Note:
	except of forking GitHub has pull request. They are linked. When I commited changes and push them they are on fork repo only. So if I want original repo owner adds my changes I'll make pull request. And then owner decides add them or not.



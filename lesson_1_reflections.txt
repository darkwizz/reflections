 - How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

One file can be changed many more times, but it doesn't means that the newes version is the most good. So when I realise that I've already made file with suitable content, I can return to this version, because I have a history.

 - What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

When you by own hands do commits, you can divide or group them according to their logical content. Also you yourself decide when it's time to make commit, because automatical VCS may make commit or too large or too small. And your commits don't depend on time instead of planned commits of automatical VCS.

*Note: commit is a snapshot of all files in repository at some time.

 - Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

I think such VCS like Git are oriented on programmers, whose programs contain more than one file. And commit one file separately is very slow.

*Note: exit from log or diff -> q key

 - How can you use the commands git log and git diff to view history of files?

When current repository contains errors, I can go back to the commits history and find where error is. Also I can find an author of this commit and tell him about mistake.

 - How might using control version systems make you more confident to make changes that could break something?

If I even break something, these mistakes could be found and fix easily because VCS store all history of project and by checking out some commits I can find the first bug version and fix it.

 - Now that you have your workspace set up, what do you want to try using Git for?

Mostly for programming.

*Note:
@@ -l,s +l,s @@ - это в каждом выводе diff. ћинус показывает старый файл, а плюс - новый. l - строка, начина€ с которой были изменени€; s - количество изменЄнных строк.

*Note:
'HEAD' is name of Git current commit. When repository is created (after git init) there no any commits, so 'HEAD' doesn't exist. When try to git log there'll be FATAL message